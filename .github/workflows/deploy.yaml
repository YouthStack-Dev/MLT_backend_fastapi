name: Build, Push, and Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  REPO_NAME: fleet
  IMAGE_TAG: latest
  STACK_NAME: fleet-service-manager

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws_account
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          aws ecr get-login-password --region $AWS_REGION | \
          echo "ECR_REGISTRY=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com" >> $GITHUB_ENV

      - name: Create ECR repository if not exists
        run: |
          echo "AWS Account: ${ACCOUNT_ID}"
          echo "AWS Region: ${AWS_REGION}"
          echo "Repository name: ${REPO_NAME}"
          
          # Try to create repository - ignore if exists
          aws ecr create-repository \
            --repository-name ${REPO_NAME} \
            --region ${AWS_REGION} \
            --image-scanning-configuration scanOnPush=true || true
          
          # Verify repository exists
          REPO_CHECK=$(aws ecr describe-repositories \
            --repository-names ${REPO_NAME} \
            --region ${AWS_REGION} \
            --query 'repositories[0].repositoryName' \
            --output text 2>/dev/null || echo "NOT_FOUND")
          
          if [ "$REPO_CHECK" = "NOT_FOUND" ]; then
            echo "Repository ${REPO_NAME} not found or not accessible"
            exit 1
          fi

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Build, tag, and push Docker image
        env:
          ECR_REGISTRY: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
        run: |
          # Build and tag in one step
          docker compose build service_manager
          
          REPOSITORY_URI=${ECR_REGISTRY}/${REPO_NAME}
          echo "Using repository URI: ${REPOSITORY_URI}"
          
          # Tag and push
          docker tag fleet_service_manager:latest ${REPOSITORY_URI}:${IMAGE_TAG}
          docker push ${REPOSITORY_URI}:${IMAGE_TAG} || {
            echo "Push failed. Repository status:"
            aws ecr describe-repositories --repository-names ${REPO_NAME} --region ${AWS_REGION}
            exit 1
          }
          
          echo "IMAGE_URI=${REPOSITORY_URI}:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
                VpcId=${{ secrets.VPC_ID }} \
                Subnets=\"${{ secrets.SUBNETS }}\" \
                DBPassword=${{ secrets.DB_PASSWORD }} \
                ECRImageUrl=$IMAGE_URI \
            --capabilities CAPABILITY_NAMED_IAM
