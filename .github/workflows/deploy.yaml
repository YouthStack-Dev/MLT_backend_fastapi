name: Build, Push, and Deploy to AWS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-south-1
  REPO_NAME: fleet-service-manager
  IMAGE_TAG: latest
  STACK_NAME: fleet-service-manager

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get AWS Account ID
        id: aws_account
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names $REPO_NAME --region $AWS_REGION || \
          aws ecr create-repository --repository-name $REPO_NAME --region $AWS_REGION

      - name: Build, tag, and push Docker image
        run: |
          IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO_NAME:$IMAGE_TAG
          docker build -t $REPO_NAME .
          docker tag $REPO_NAME:latest $IMAGE_URI
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name $STACK_NAME \
            --parameter-overrides \
                VpcId=${{ secrets.VPC_ID }} \
                Subnets=\"${{ secrets.SUBNETS }}\" \
                DBPassword=${{ secrets.DB_PASSWORD }} \
                ECRImageUrl=$IMAGE_URI \
            --capabilities CAPABILITY_NAMED_IAM
